/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
    /delete-property/ ignore-modifiers;
};

#define QWERTY_L 0
#define SYM_L    1
#define NAV_L    2
#define FUN_L    3

/ {
    // combos {
    //     compatible = "zmk,combos";

    // // shortcut
    // #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
    //       combo_##NAME { \
    //         timeout-ms = <TIMEOUT>; \
    //         bindings = <BINDINGS>; \
    //         key-positions = <KEYPOS>; \
    //       };

    //     /*                KEY POSITIONS

    //       ╭────────────────────╮ ╭────────────────────╮
    //       │  0   1   2   3   4 │ │  5   6   7   8   9 │
    //       │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
    //       │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
    //       ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
    //               ╰────────────╯ ╰────────────╯        */

    //     COMBO(caps_word, &caps_word, 13 16, 60)
    //     COMBO(lc, <&kp LC>, 21 22, 50)
    //     COMBO(la, <&kp LA>, 22 23, 50)
    //     COMBO(ra, <&kp RA>, 26 27, 50)
    //     COMBO(rc, <&kp RC>, 27 28, 50)
    // };

    // behaviors {

    // };

    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <1 2>;
    //         then-layer = <3>;
    //     };
    // };

	keymap {
		compatible = "zmk,keymap";

        // QWERTY
		qwerty_layer {
			bindings = <
                   &kp Q        &kp W         &kp E         &kp R              &kp T              &kp Y                &kp U            &kp I                    &kp O         &kp P
                   &kp A        &kp S         &lhm D        &kp F              &kp G              &kp H                &kp J            &kp K                    &kp L         &kp SEMI
                   &kp Z        &kp X         &kp C         &kp V              &kp B              &kp N                &kp M            &kp COMMA                &kp DOT       &kp FSLH
				 /*&            &*/           &kp LGUI      &kp LSHFT          &lt SYM_L ESC      &lt NAV_L ENTER      &kp SPACE        &mt LGUI TAB    /* &             &*/
			>;
		};

		sym_layer {
			bindings = <
                   &kp EXCL     &kp AT        &kp LBRC      &kp RBRC           &kp PIPE           &kp STAR            &kp EQUAL        &kp GT                   &kp BSLH     &kp SLASH
                   &kp HASH     &kp DLLR      &kp LPAR      &kp RPAR           &kp GRAVE          &kp PLUS            &kp MINUS        &kp APOS                 &kp DQT      &kp PIPE
                   &kp PERCENT  &kp CARET     &kp LBKT      &kp RBKT           &kp TILDE          &kp AMPERSAND       &kp UNDERSCORE   &kp GT                   &kp RBKT     &kp QMARK
				 /*&            &*/           &trans        &trans             &trans             &trans              &kp BSPC         &trans    /*             &             &*/
			>;
		};

		nav_layer {
			bindings = <
                   &kp N1       &kp N2        &kp N3        &kp N4             &kp N5             &kp N6              &kp N7           &kp N8                   &kp N9        &kp N0
                   &trans       &kp C_PREV    &kp C_PP      &kp C_NEXT         &kp C_VOL_UP       &kp LEFT            &kp DOWN         &kp UP                   &kp RIGHT     &trans
                   &sk LS       &sk LC        &sk LA        &sk LG             &kp C_VOL_DN       &kp HOME            &kp PG_DN        &kp PG_UP                &kp END       &trans
				 /*&            &*/           &trans        &trans             &trans             &trans              &trans           &trans /*            &             &*/
			>;
		};

		function_layer {
			bindings = <
                   &kp F9       &kp F10       &kp F11       &kp F12            &trans             &trans              &trans           &trans                   &trans        &trans
                   &kp F5       &kp F6        &kp F7        &kp F8             &LG(TILDE)         &LC(LS(TAB))        &trans           &trans                   &LC(TAB)      &trans
                   &kp F1       &kp F2        &kp F3        &kp F4             &trans             &trans              &trans           &trans                   &LA(BSPC)     &LG(BSPC)
				 /*&            &*/           &trans        &trans             &trans             &trans              &trans           &trans /*                &             &*/
			>;
		};
	};
};
