/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
/* use helper macros to define left and right hand keys */
#include "zmk-helpers/key-labels/36.h"                                      // key-position labels

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

#define QWERTY_L 0
#define NAV_L 1
#define SYM_L 2
#define FUN_L 3

/* left-hand HRMs, e.g. `&hml LSHIFT F` */
/ ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs, e.g. `&hmr LSHIFT J` */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/**
Home row mods will be CAGS, Control Alt Gui Shift on the left hand side
                      SGAC, inverted on the left
Shift in center, then GUI, Alt under the ring finger, and Control under the pinky
 */

/ {
    
    behaviors {
        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
       };
    };

    combos {
        compatible = "zmk,combos";

        // Helper for defining combos with simpler syntax
        // @example
        // ```
        // COMBO(lctrl, &kp LCTRL, 21 22, 50)
        // ```
        #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
            combo_##NAME { \
                timeout-ms = <TIMEOUT>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
            };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */

        COMBO(caps_word_left, &caps_word, 13 16, 50)

        COMBO(lctrl, &kp LCTRL, 21 22, 50)
        COMBO(lalt,  &kp LALT,  22 23, 50)
        COMBO(ralt,  &kp RALT,  26 27, 50)
        COMBO(rctrl, &kp LCTRL, 27 28, 50)
    };

	keymap {
		compatible = "zmk,keymap";

        // QWERTY
		qwerty_layer {
			bindings = <
                   &kp Q        &kp W         &kp E         &kp R              &kp T              &kp Y               &kp U            &kp I                 &kp O         &kp P
                   &hml LCTRL A &hml LALT S   &hml LGUI D   &hml LSHFT F       &kp G              &kp H               &hmr RSHFT J     &hmr RGUI K           &hmr RALT L   &hmr RCTL SEMI
                   &kp Z        &kp X         &kp C         &kp V              &kp B              &kp N               &kp M            &kp COMMA             &kp DOT       &kp SLASH
				 /*&            &*/           &kp LGUI      &kp LSHIFT         &lt SYM_L ESC      &lt NAV_L ENTER     &kp SPACE        &mt RGUI TAB /* &             &*/
			>;
		};

        // NAV
		nav_layer {
			bindings = <
                   &kp N1       &kp N2        &kp N3        &kp N4             &kp N5             &kp N6              &kp N7           &kp N8                &kp N9        &kp N0
                   &trans       &kp C_PREV    &kp C_PP      &kp C_NEXT         &kp C_VOL_UP       &kp LEFT            &kp DOWN         &kp UP                &kp RIGHT     &trans
                   &sk LSHFT    &sk LCTRL     &sk LALT      &sk LGUI           &kp C_VOL_DN       &kp HOME            &kp PG_DN        &kp PG_UP             &kp END       &trans
				 /*&            &*/           &trans        &trans             &trans             &trans              &trans           &trans    /* &             &*/
			>;
		};

        // SYM
		sym_layer {
			bindings = <
                   &kp EXCL     &kp AT        &kp LBRC      &kp RBRC           &kp PIPE           &kp STAR            &kp EQUAL        &kp GT                &kp BSLH      &kp SLASH
                   &kp HASH     &kp DOLLAR    &kp LPAR      &kp RPAR           &kp GRAVE          &kp PLUS            &kp MINUS        &kp APOS              &kp DQT       &kp COLON
                   &kp PRCNT    &kp CARET     &kp LBKT      &kp RBKT           &kp TILDE          &kp AMPS            &kp UNDER        &kp LT                &kp GT        &kp QMARK
				 /*&            &*/           &trans        &trans             &trans             &trans              &kp BSPC         &trans    /* &             &*/
			>;
		};


        // FUN
		fun_layer {
			bindings = <
                   &kp F9       &kp F10       &kp F11       &kp F12            &trans             &trans              &trans           &trans                &trans        &bt BT_CLR_ALL  
                   &kp F5       &kp F6        &kp F7        &kp F8             &kp LG(GRAVE)      &kp LS(LC(TAB))     &trans           &trans                &kp LC(TAB)   &trans 
                   &kp F1       &kp F2        &kp F3        &kp F4             &trans             &trans              &trans           &trans                &kp LA(BSPC)  &kp LG(BSPC)
				 /*&            &*/           &trans        &trans             &trans             &trans              &trans           &trans    /* &             &*/
			>;
		};
	};

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
